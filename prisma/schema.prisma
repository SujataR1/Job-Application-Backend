generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  Recruiter
  Applicant
}

model User {
  id                 String   @id @default(uuid())
  fullName           String
  email              String   @unique
  emailVerified      Boolean  @default(false)
  twoFaEnabled       Boolean  @default(false)
  password           String
  phoneNumber        String?
  userType           UserType
  lookingToApply     Boolean
  lookingToRecruit   Boolean
  profilePicturePath String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt


  otps         OTP[]
  companies    Companies?    @relation(fields: [companiesId], references: [id])
  companiesId  String?
  jobPoster    JobPostings[] @relation("JobPoster")
  jobApplicant JobPostings[] @relation("JobApplicants")
}

model Companies {
  id            String        @id @default(uuid())
  name          String
  description   String
  usersInvolved User[] 
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  JobPostings   JobPostings[]
}

model JobPostings {
  id          String     @id @default(uuid())
  title       String
  companyId   String? 
  company     Companies? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userId      String? 
  applicants  User?      @relation("JobApplicants", fields: [userId], references: [id], onDelete: Cascade)
  posterId    String? 
  poster      User?      @relation("JobPoster", fields: [posterId], references: [id], onDelete: Cascade)
  description String
  location    String
  salary      Float?
  postedAt    DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
}

enum OTPType {
  TwoFa
  PasswordReset
  EmailVerification
}

model OTP {
  otp       String   @id @unique
  otpType   OTPType
  createdAt DateTime @default(now())
  expiry    DateTime
  userId    String 
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, otpType, expiry])
}

model Blacklisted_Tokens {
  blacklistedToken String   @id @unique
  blacklistedAt    DateTime @default(now())
}
